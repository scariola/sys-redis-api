<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="sys-redis-api-suite.xml" />
	<munit:test
		name="get:\state\(msisdn):sys-redis-api-success-test"
		doc:id="e0bb4f8a-a424-4bd1-bdc4-30a2eb299d03">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Set Redis Key - State"
				doc:id="e3ae14e2-eba8-4cd1-b974-bab2a89dc577" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="d27c76d2-9418-457a-bde5-115f32ed3f58"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://getstatemsisdnsysredisapisuccesstest\mock_payload.dwl')]"
						encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://getstatemsisdnsysredisapisuccesstest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getstatemsisdnsysredisapisuccesstest\mock_variable_.dwl')]" />
						<munit-tools:variable key="redis-key"
							value="#[output application/java --- readUrl('classpath://getstatemsisdnsysredisapisuccesstest\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock get-redis-cache-state"
				doc:id="e039036d-fbe8-45e4-869f-453b6d7c6316" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="b8b48081-04a9-4d52-96f2-d84a24020ae8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://getstatemsisdnsysredisapisuccesstest\mock_payload1.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getstatemsisdnsysredisapisuccesstest\mock_variable_2.dwl')]" />
						<munit-tools:variable key="redis-key"
							value="#[output application/java --- readUrl('classpath://getstatemsisdnsysredisapisuccesstest\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="eb5608e3-f977-445f-88db-a1755d47db1a">
				<munit:payload
					value="#[readUrl('classpath://getstatemsisdnsysredisapisuccesstest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://getstatemsisdnsysredisapisuccesstest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getstatemsisdnsysredisapisuccesstest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to get:\state\(msisdn):sys-redis-api-config"
				doc:id="b774a89c-f64e-45d2-bee1-166a8f4a7601"
				name="get:\state\(msisdn):sys-redis-api-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="c4b02483-1fbe-41aa-87df-31f196349001"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getstatemsisdnsysredisapisuccesstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END - GET /state/{msisdn}"
				doc:id="32f6b401-6da0-4e70-af06-5f2fe22183b8" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="2ffc0581-9f52-4c4c-bb19-0d2961fdf2be"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="put:\state\(msisdn):application\json:sys-redis-api-success-test"
		doc:id="5e897d2e-bb42-4bc4-813f-03b0a7c3a753">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Set Redis Key - State"
				doc:id="3436185f-26af-4ac6-b379-2d3df08b2b7f" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="608add73-f3f6-4875-a01e-8034cef2e3f8"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://putstatemsisdnapplicationjsonsysredisapisuccesstest\mock_payload.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://putstatemsisdnapplicationjsonsysredisapisuccesstest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://putstatemsisdnapplicationjsonsysredisapisuccesstest\mock_variable_.dwl')]" />
						<munit-tools:variable key="redis-key"
							value="#[output application/java --- readUrl('classpath://putstatemsisdnapplicationjsonsysredisapisuccesstest\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock update-redis-cache-state"
				doc:id="4eed7d81-fd3e-4abc-8f02-5d9966203402" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="d89a55e1-3393-49ff-8ea8-ad32d8f067c0"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://putstatemsisdnapplicationjsonsysredisapisuccesstest\mock_payload1.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://putstatemsisdnapplicationjsonsysredisapisuccesstest\mock_variable_2.dwl')]" />
						<munit-tools:variable key="redis-key"
							value="#[output application/java --- readUrl('classpath://putstatemsisdnapplicationjsonsysredisapisuccesstest\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="ab0a14fb-41aa-436e-9a00-c4ec1eef3588">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://putstatemsisdnapplicationjsonsysredisapisuccesstest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://putstatemsisdnapplicationjsonsysredisapisuccesstest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://putstatemsisdnapplicationjsonsysredisapisuccesstest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to put:\state\(msisdn):application\json:sys-redis-api-config"
				doc:id="35a69b2f-f93f-4d15-befb-53a66a67d0ac"
				name="put:\state\(msisdn):application\json:sys-redis-api-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="b97bc495-3786-44b5-8e7f-29dfe65cafd6"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import putstatemsisdnapplicationjsonsysredisapisuccesstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END - PUT /state/{msisdn}"
				doc:id="005aafa0-80e9-4bfc-a8b1-f42600ef2148" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8722aed7-da6b-4901-a9d4-3ec1097171e9"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="get:\brand\(prefix):sys-redis-api-success-test"
		doc:id="1df34b1e-51a3-4d5c-809a-f3cc61deda39">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock Set Redis Key - Brand"
				doc:id="91afdbf6-db92-4f7e-a954-726aa4153289" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="498e5261-cf72-41f0-ade2-87ccafdcf242"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[readUrl('classpath://getbrandprefixsysredisapiconfigtest\mock_payload.dwl')]"
						encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://getbrandprefixsysredisapiconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getbrandprefixsysredisapiconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="redis-key"
							value="#[output application/java --- readUrl('classpath://getbrandprefixsysredisapiconfigtest\mock_variable_1.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock get-redis-cache-brand"
				doc:id="c3c98f4d-70d0-40f2-b2b9-e68a8c82fed9" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f1dce388-f774-422e-8ebd-4cbc996adf84"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://getbrandprefixsysredisapiconfigtest\mock_payload1.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://getbrandprefixsysredisapiconfigtest\mock_variable_2.dwl')]" />
						<munit-tools:variable key="redis-key"
							value="#[output application/java --- readUrl('classpath://getbrandprefixsysredisapiconfigtest\mock_variable_3.dwl')]"
							mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="954bb81b-d713-446a-b634-7dccd3ef0ce5">
				<munit:payload
					value="#[readUrl('classpath://getbrandprefixsysredisapiconfigtest\set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes
					value="#[readUrl('classpath://getbrandprefixsysredisapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://getbrandprefixsysredisapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to get:\brand\(prefix):sys-redis-api-config"
				doc:id="b2516f8b-4a59-44ad-ad50-29754420ec06"
				name="get:\brand\(prefix):sys-redis-api-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="84a54c8c-d02e-4225-a40b-b768e69cf9ba"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getbrandprefixsysredisapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END - GET /brand/{prefix}"
				doc:id="0f849226-a0d9-4c10-9db4-0efdb9219b7b" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="2a7f1529-e659-4ce4-8ab4-e4fcd3f8ca82"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="post:\brand:application\json:sys-redis-api-succes-test"
		doc:id="6de63269-6b88-40b1-b542-f3fecf0381b9">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock create-redis-cache-brand"
				doc:id="a6660986-8bda-4b12-b540-df60c9e1590c" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="fceb4e78-3ca2-41d3-b6b4-77a532756af7"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://postbrandapplicationjsonsysredisapisuccestest\mock_payload.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://postbrandapplicationjsonsysredisapisuccestest\mock_variable_.dwl')]" />
						<munit-tools:variable key="redis-key"
							value="#[output application/json --- readUrl('classpath://postbrandapplicationjsonsysredisapisuccestest\mock_variable_1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock Set Redis Key - Brand"
				doc:id="2ab1edaa-fd19-46b5-a816-9131b9ec3460" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="a8b16708-a0fc-4ff2-b3a0-4fd5a46c4274"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://postbrandapplicationjsonsysredisapisuccestest\mock_payload1.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes
						value="#[readUrl('classpath://postbrandapplicationjsonsysredisapisuccestest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders"
							value="#[readUrl('classpath://postbrandapplicationjsonsysredisapisuccestest\mock_variable_2.dwl')]" />
						<munit-tools:variable key="redis-key"
							value="#[output application/json --- readUrl('classpath://postbrandapplicationjsonsysredisapisuccestest\mock_variable_3.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input"
				doc:id="bb78065d-cd5f-4ea5-87b3-acb155ff1ce5">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://postbrandapplicationjsonsysredisapisuccestest\set-event_payload.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://postbrandapplicationjsonsysredisapisuccestest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders"
						value="#[readUrl('classpath://postbrandapplicationjsonsysredisapisuccestest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref
				doc:name="Flow-ref to post:\brand:application\json:sys-redis-api-config"
				doc:id="d9f3649d-b8bb-4170-9e57-72093e6bad64"
				name="post:\brand:application\json:sys-redis-api-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="00329c33-a0a5-418d-9889-fa01a41f4335"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import postbrandapplicationjsonsysredisapisuccestest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END - GET /brand/"
				doc:id="b2838c54-f6a3-4c40-a27a-5d988485b3a2" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="01aa6a21-386b-4133-af53-9a36b4d3b3dc"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
</mule>
